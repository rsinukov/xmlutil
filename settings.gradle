/*
 * Copyright (c) 2016.
 *
 * This file is part of XmlUtil.
 *
 * This file is licenced to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You should have received a copy of the license with the source distribution.
 * Alternatively, you may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

pluginManagement {
    repositories {
        maven {
            name = "Bundled maven"
            url = file("mavenBundled")
        }
        mavenLocal()
        gradlePluginPortal()
        google()
        mavenCentral()
    }
    resolutionStrategy {
        eachPlugin {
            switch (requested.id.id) {
                case "com.android.library":
                case "com.android.application" :
                    def ver = requested.version!=null ? requested.version : androidBuildToolsVersion
                    useModule("com.android.tools.build:gradle:${ver}");
                    break
                case "org.jetbrains.kotlin.android":
                case "org.jetbrains.kotlin.jvm":
                case "kotlin-android-extensions" :
                case "org.jetbrains.kotlin.multiplatform":
                    def ver = requested.version!=null ? requested.version : kotlin_version
                    useVersion(ver)
                    break
                case "org.jetbrains.dokka" :
                case "org.jetbrains.dokka-android" :
                    def ver = requested.version!=null ? requested.version : dokkaVersion
                    useVersion(ver)
                    break
                case "org.jetbrains.kotlinx.binary-compatibility-validator" :
                    def ver = requested.version!=null ? requested.version : validatorVersion
                    useModule("org.jetbrains.kotlinx:binary-compatibility-validator:$ver")
                    break
                case "kotlinx-serialization":
                    def version = (requested.version == null || requested.version.length() == 0) ? kotlin_version : requested.version
                    useModule("org.jetbrains.kotlin:kotlin-serialization:$version")
                    break
            }
        }
    }
}

plugins {
    id "com.gradle.enterprise" version "3.1.1"
}

rootProject.name = "xmlutil"

include(":serialutil")
include(":core")
include(":serialization")
include(":ktor")
include(":xmlserializable")
include(":examples")
include(":xmlschema")

gradleEnterprise {
    buildScan {
        // plugin configuration
    }
}
